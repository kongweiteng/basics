<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.enn.energy.business.dao.ElectricMeterReadingMinutePoMapper">
    <resultMap id="BaseResultMap" type="com.enn.vo.energy.business.po.ElectricMeterReadingMinutePo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="meter_no" property="meterNo" jdbcType="VARCHAR"/>
        <result column="metric" property="metric" jdbcType="VARCHAR"/>
        <result column="read_time" property="readTime" jdbcType="VARCHAR"/>
        <result column="use_quantity" property="useQuantity" jdbcType="DECIMAL"/>
        <result column="fees" property="fees" jdbcType="DECIMAL"/>
        <result column="electric_type" property="electricType" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="CountResultMap" type="com.enn.vo.energy.business.bo.ElectricMeterReadingMinuteStatisticsBo">
        <result column="totalElectricPower" property="totalElectricPower" jdbcType="DECIMAL"/>
        <result column="totalElectricFees" property="totalElectricFees" jdbcType="DECIMAL"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, meter_no, metric, read_time, use_quantity, fees, electric_type
  </sql>

    <sql id="where_readingminute_query_condition">
        <where>
            <if test="equipID !=null">
                and meter_no in
                <foreach collection="equipID" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="start !=null and end !=null">
                and read_time between #{start} and #{end}
            </if>
        </where>
    </sql>

    <select id="queryElectricMeterReadingMinuteByAssignedConditon" resultMap="BaseResultMap"
            parameterType="com.enn.vo.energy.business.condition.ElectricMeterReadingMinuteCondition">
        select * from electric_meter_reading_minute
        <include refid="where_readingminute_query_condition"/>
        order by id asc
    </select>

    <sql id="where_readingminute_count_condition">
        <where>
            <if test="equipID !=null">
                and meter_no in
                <foreach collection="equipID" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="start !=null and end !=null">
                and read_time between #{start} and #{end}
            </if>
        </where>
    </sql>

    <select id="countElectricMeterReadingMinuteByAssignedConditon" resultMap="CountResultMap"
            parameterType="com.enn.vo.energy.business.condition.ElectricMeterReadingMinuteCondition">
        select sum(use_quantity) as totalElectricPower,sum(fees) as totalElectricFees from electric_meter_reading_minute
        <include refid="where_readingminute_count_condition"/>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from electric_meter_reading_minute
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from electric_meter_reading_minute
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.enn.vo.energy.business.po.ElectricMeterReadingMinutePo"
            useGeneratedKeys="true" keyProperty="id">
    insert into electric_meter_reading_minute (meter_no, metric, read_time, 
      use_quantity, fees, electric_type
      )
    values (#{meterNo,jdbcType=VARCHAR}, #{metric,jdbcType=VARCHAR}, #{readTime,jdbcType=VARCHAR}, 
      #{useQuantity,jdbcType=DECIMAL}, #{fees,jdbcType=DECIMAL}, #{electricType,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.enn.vo.energy.business.po.ElectricMeterReadingMinutePo"
            useGeneratedKeys="true" keyProperty="id">
        insert into electric_meter_reading_minute
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="meterNo != null">
                meter_no,
            </if>
            <if test="metric != null">
                metric,
            </if>
            <if test="readTime != null">
                read_time,
            </if>
            <if test="useQuantity != null">
                use_quantity,
            </if>
            <if test="fees != null">
                fees,
            </if>
            <if test="electricType != null">
                electric_type,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="meterNo != null">
                #{meterNo,jdbcType=VARCHAR},
            </if>
            <if test="metric != null">
                #{metric,jdbcType=VARCHAR},
            </if>
            <if test="readTime != null">
                #{readTime,jdbcType=VARCHAR},
            </if>
            <if test="useQuantity != null">
                #{useQuantity,jdbcType=DECIMAL},
            </if>
            <if test="fees != null">
                #{fees,jdbcType=DECIMAL},
            </if>
            <if test="electricType != null">
                #{electricType,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.enn.vo.energy.business.po.ElectricMeterReadingMinutePo">
        update electric_meter_reading_minute
        <set>
            <if test="meterNo != null">
                meter_no = #{meterNo,jdbcType=VARCHAR},
            </if>
            <if test="metric != null">
                metric = #{metric,jdbcType=VARCHAR},
            </if>
            <if test="readTime != null">
                read_time = #{readTime,jdbcType=VARCHAR},
            </if>
            <if test="useQuantity != null">
                use_quantity = #{useQuantity,jdbcType=DECIMAL},
            </if>
            <if test="fees != null">
                fees = #{fees,jdbcType=DECIMAL},
            </if>
            <if test="electricType != null">
                electric_type = #{electricType,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.enn.vo.energy.business.po.ElectricMeterReadingMinutePo">
    update electric_meter_reading_minute
    set meter_no = #{meterNo,jdbcType=VARCHAR},
      metric = #{metric,jdbcType=VARCHAR},
      read_time = #{readTime,jdbcType=VARCHAR},
      use_quantity = #{useQuantity,jdbcType=DECIMAL},
      fees = #{fees,jdbcType=DECIMAL},
      electric_type = #{electricType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="getSum" resultType="com.enn.vo.energy.business.resp.ElectricMeterReadingResp">
        SELECT
        COALESCE(SUM(CASE WHEN electric_type='01' then fees ELSE 0 end),0) AS 'tipFees',
        COALESCE(SUM(CASE WHEN electric_type='02' then fees ELSE 0 end),0) AS 'peakFees',
        COALESCE(SUM(CASE WHEN electric_type='03' then fees ELSE 0 end),0) AS 'flatFees',
        COALESCE(SUM(CASE WHEN electric_type='04' then fees ELSE 0 end),0) AS 'valleyFees',
        COALESCE(SUM(CASE WHEN electric_type='01' then use_quantity ELSE 0 end),0) AS 'tipQuantity',
        COALESCE(SUM(CASE WHEN electric_type='02' then use_quantity ELSE 0 end),0) AS 'peakQuantity',
        COALESCE(SUM(CASE WHEN electric_type='03' then use_quantity ELSE 0 end),0) AS 'flatQuantity',
        COALESCE(SUM(CASE WHEN electric_type='04' then use_quantity ELSE 0 end),0) AS 'valleyQuantity'
        FROM electric_meter_reading_minute
        WHERE 1 = 1
        AND read_time >= #{startTime}
        AND read_time &lt;= #{endTime}
        AND meter_no IN
        <foreach collection="meterNoList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getMeterMinute" resultType="com.enn.vo.energy.business.po.DataResp">
        SELECT
        MAX(read_time) as dateTime,
        SUM(use_quantity) as dateValue
        FROM electric_meter_reading_minute
        WHERE meter_no IN
        <foreach collection="meterNoList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND read_time >= #{startTime}
        AND read_time &lt;= #{endTime}
        <if test="electrictype != null">
            AND electric_type=#{electrictype}
        </if>
    </select>

    <select id="getSumMinute" resultType="com.enn.vo.energy.business.po.DataResp">
        SELECT
        MAX(read_time) as dateTime,
        SUM(use_quantity) as dateValue
        FROM electric_meter_reading_minute
        WHERE meter_no IN
        <foreach collection="meterNoList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND read_time >= #{startTime}
        AND read_time &lt;= #{endTime}
    </select>

    <select id="getElecSumByMinute" resultType="com.enn.vo.energy.business.resp.StatisticsDataResp">
        select   SUM(use_quantity) AS sumQuantity,
        SUM(fees) AS sumFees,
        read_time as readTime
        from electric_meter_reading_minute
        WHERE read_time >= #{startTime}
        AND read_time &lt;= #{endTime}
        AND meter_no IN
        <foreach collection="meterNoList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        group by read_time
    </select>

</mapper>