<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.enn.energy.business.dao.SteamMeterReadingMinutePoMapper" >
  <resultMap id="BaseResultMap" type="com.enn.vo.energy.business.po.SteamMeterReadingMinutePo" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="meter_no" property="meterNo" jdbcType="VARCHAR" />
    <result column="metric" property="metric" jdbcType="VARCHAR" />
    <result column="read_time" property="readTime" jdbcType="VARCHAR" />
    <result column="use_quantity" property="useQuantity" jdbcType="DECIMAL" />
    <result column="quantity" property="quantity" jdbcType="DECIMAL" />
    <result column="fees" property="fees" jdbcType="DECIMAL" />
  </resultMap>
  
  <resultMap id="CountResultMap" type="com.enn.vo.energy.business.bo.SteamMeterReadingMinuteStatisticsBo">
  	<result  column="totalSteamPower" property="totalSteamPower" jdbcType="DECIMAL"/>
  	<result  column="totalSteamFees" property="totalSteamFees" jdbcType="DECIMAL"/>
  </resultMap>
  <sql id="Base_Column_List" >
    id, meter_no, metric, read_time, use_quantity, quantity, fees
  </sql>
  
  
  <sql id="where_readingminute_query_condition">
  	<where>
  		<if test="equipID !=null">
  			and meter_no in 
  			<foreach collection="equipID" index="index" item="item" open="(" separator="," close=")">
                #{item}       
        	</foreach> 
  		</if>
  		<if test="metric !=null">
  			and metric=#{metric}
  		</if>
  		<if test="start !=null and end !=null">
  			and read_time between #{start} and #{end}
  		</if>
     </where>
  </sql>
  
  <select id="querySteamMeterReadingMinuteByAssignedConditon" resultMap="BaseResultMap" parameterType="com.enn.vo.energy.business.condition.SteamMeterReadingMinuteCondition">
  		select
          id,
          meter_no,
          IFNULL(use_quantity, 0) AS use_quantity,
          IFNULL(quantity, 0) AS quantity,
          fees,
          metric,
          read_time
          from steam_meter_reading_minute
		<include refid="where_readingminute_query_condition" />
		order by id asc 
  </select>
  
  <sql id="where_readingminute_count_condition">
  	<where>
  		<if test="equipID !=null">
  			and meter_no in 
  			<foreach collection="equipID" index="index" item="item" open="(" separator="," close=")">
                #{item}       
        	</foreach> 
  		</if>
  		<if test="metric !=null">
  			and metric=#{metric}
  		</if>
  		<if test="start !=null and end !=null">
  			and read_time between #{start} and #{end}
  		</if>
     </where>
  </sql>
  
  <select id="countSteamMeterReadingMinuteByAssignedConditon" resultMap="CountResultMap" parameterType="com.enn.vo.energy.business.condition.SteamMeterReadingMinuteCondition">
  		select sum(use_quantity) as totalSteamPower ,sum(fees) as totalSteamFees from steam_meter_reading_minute 
		<include refid="where_readingminute_count_condition" />
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from steam_meter_reading_minute
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from steam_meter_reading_minute
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.enn.vo.energy.business.po.SteamMeterReadingMinutePo" useGeneratedKeys="true" keyProperty="id" >
    insert into steam_meter_reading_minute (meter_no, metric, read_time, 
      use_quantity, quantity, fees
      )
    values (#{meterNo,jdbcType=VARCHAR}, #{metric,jdbcType=VARCHAR}, #{readTime,jdbcType=VARCHAR}, 
      #{useQuantity,jdbcType=DECIMAL}, #{quantity,jdbcType=DECIMAL}, #{fees,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.enn.vo.energy.business.po.SteamMeterReadingMinutePo" useGeneratedKeys="true" keyProperty="id" >
    insert into steam_meter_reading_minute
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="meterNo != null" >
        meter_no,
      </if>
      <if test="metric != null" >
        metric,
      </if>
      <if test="readTime != null" >
        read_time,
      </if>
      <if test="useQuantity != null" >
        use_quantity,
      </if>
      <if test="quantity != null" >
        quantity,
      </if>
      <if test="fees != null" >
        fees,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="meterNo != null" >
        #{meterNo,jdbcType=VARCHAR},
      </if>
      <if test="metric != null" >
        #{metric,jdbcType=VARCHAR},
      </if>
      <if test="readTime != null" >
        #{readTime,jdbcType=VARCHAR},
      </if>
      <if test="useQuantity != null" >
        #{useQuantity,jdbcType=DECIMAL},
      </if>
      <if test="quantity != null" >
        #{quantity,jdbcType=DECIMAL},
      </if>
      <if test="fees != null" >
        #{fees,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.enn.vo.energy.business.po.SteamMeterReadingMinutePo" >
    update steam_meter_reading_minute
    <set >
      <if test="meterNo != null" >
        meter_no = #{meterNo,jdbcType=VARCHAR},
      </if>
      <if test="metric != null" >
        metric = #{metric,jdbcType=VARCHAR},
      </if>
      <if test="readTime != null" >
        read_time = #{readTime,jdbcType=VARCHAR},
      </if>
      <if test="useQuantity != null" >
        use_quantity = #{useQuantity,jdbcType=DECIMAL},
      </if>
      <if test="quantity != null" >
        quantity = #{quantity,jdbcType=DECIMAL},
      </if>
      <if test="fees != null" >
        fees = #{fees,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.enn.vo.energy.business.po.SteamMeterReadingMinutePo" >
    update steam_meter_reading_minute
    set meter_no = #{meterNo,jdbcType=VARCHAR},
      metric = #{metric,jdbcType=VARCHAR},
      read_time = #{readTime,jdbcType=VARCHAR},
      use_quantity = #{useQuantity,jdbcType=DECIMAL},
      quantity = #{quantity,jdbcType=DECIMAL},
      fees = #{fees,jdbcType=DECIMAL}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>